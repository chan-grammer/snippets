# Console (Log)
snippet cl
	console.log(${1:'msg'});
# Declaration (Variable)
snippet vv
	var ${1:variable} = ${2:value}
# Declaration (Function)
snippet vf
	var ${1:variable} = function(${2:value}) {
		${3:prop}
	};
# Declaration (Array)
snippet va
	var ${1:variable} = [${2:value}, ${3:value}, ${4:value}];
# Object Literal
snippet vo
	var ${1:var_name} = {
		${2:method}
	}
# Standalone Array
snippet sa
	[${1:val1}, ${2:val1}, ${3:val1}];
# Standalone Obj Literal
snippet so
	{${1:property} : ${2:value}}
	${0}
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Name-Value Pair (Property)
snippet nvp
	${1:name} : "${2:value}"
# Name-Value Pair (Function)
snippet nvf
	${1:name} : function(${2:args}) {
		${3:args}
	}
# Name-Value Pair (Object Literal)
snippet nvo
	${1:name} : {
		${2:args}
	}
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# Anonymous Function
snippet iife
	(function(${1}) {
		${2}}
	)(${3});
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t?
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
			${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
	${2:// code}
	break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# for (...) {...} (For in Loop)
snippet forin
	for (var ${1:key} in ${2:obj}) {
		${0}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# requirejs define
snippet def
	define([${1:jquery}],
	 function(${2:arg}) {
		${0}
	});
#requirejs define (obj literal)
snippet def{
	define({
		${1:prop1} : ${2:value1}
	});
#requirejs define (function)
snippet deff
	define(function (${1:par}) {
		${2:declarations}
		return {
			${3:return}
		};
	});
# requirejs require
snippet req
	require(['${1:dependencies}'],
	 function(${2:arg}) {
		${0}
	});
