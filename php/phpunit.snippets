# PHPUnit
# Test Boilerplate
snippet testClass
	class ${1}Test extends PHPUnit_Framework_TestCase
	{
		protected function setUp() {
			${2}
		}

		protected function tearDown() {
			${3}
		}

		public function test${4}() {
		}
	}

# Assertions
#assertNotEmpty
snippet assNE
	$this->assertNotEmpty(${1:val}, '${2:msg}');
#assertInternalType
snippet assIT
	$this->assertInternalType('${1:type}', ${2:value});
#assertInstanceOf
snippet assIO
	$this->assertInstanceOf(${1}, ${2});
#assertEquals
snippet assE
	$this->assertEquals(${1:expected}, ${2:actual});
#assertNull
snippet assN
	$this->assertNull(${1});
#assertNotNull
snippet assNN
	$this->assertNotNull(${1});
#assertSelectEquals
snippet assSE
	$this->assertSelectEquals('${1:element path}', '${2:element contents}', ${3:count}, ${4:haystack});
#assertSelectCount
snippet assSC
	$this->assertSelectCount('${1:element path}', ${2:count}, ${3:haystack});
#assertTrue
snippet assT
	$this->assertTrue(${1:False});
#assertFalse
snippet assF
	$this->assertFalse(${1:True});
#assertClassHasAttribute
snippet assCHA
	$this->assertClassHasAttribute('${1:attributename}', '${2:className}', '${3:message}');
#assertContains
snippet assCON_String
	$this->assertContains('${1:needle}', '${2:haystack}', '${3:message}');
snippet assCON_Array
	$this->assertContains('${1:element}', '${2:array}', '${3:message}');
#assertGreaterThan
snippet assGT
	$this->assertGreaterThan(${1}, ${2});
#Output Expectations
snippet tstOS
	$this->expectOutputString('${1:output}');
#Skip&IncompleteTests
snippet mrkInc
	$this->markTestIncomplete('${1:msg}');
#annotated Exceptions
snippet @excEE
	/**
	 * @expectedException ${1:YourException}
	 *
	 */
